// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

model Address {
  postalCode   String  @id
  state        String
  city         String
  neighborhood String
  street       String
  country      String  @default("Brasil")
  address      String // NOTE: Complemento
  longitude    String
  latitude     String
  stores       Store[]
}

model StoreOwner {
  email String  @id
  name  String
  phone String
  store Store[]
}

model Photo {
  id       String    @id @default(cuid())
  url      String
  name     String
  stores   Store[]
  products Product[]
}

model Store {
  id             String     @id @default(cuid())
  name           String
  registerNumber String // NOTE: CNPJ ou CPF
  whatsapp       String
  logo           Photo      @relation(fields: [logoId], references: [id])
  logoId         String
  address        Address    @relation(fields: [postalCode], references: [postalCode])
  postalCode     String
  owner          StoreOwner @relation(fields: [ownerEmail], references: [email])
  ownerEmail     String
  users          User[]
  clothings      Clothing[]

  @@index([logoId])
  @@index([postalCode])
  @@index([ownerEmail])
}

enum Size {
  S
  M
  L
  XL
  XXL
  XXXL
}

model Clothing {
  id        String  @id @default(cuid())
  sizes     String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
  store     Store   @relation(fields: [storeId], references: [id])
  storeId   String

  @@index([storeId])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  description String?
  price       Decimal?
  available   Boolean   @default(false)
  photo       Photo     @relation(fields: [photoId], references: [id])
  photoId     String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  clothing    Clothing?

  @@index([photoId])
  @@index([categoryId])
}

enum Role {
  Admin
  Editor
  Moderator
  User
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(User)
  store         Store?    @relation(fields: [storeId], references: [id])
  storeId       String?

  @@index([storeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
